// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <iostream>
#include <thread>
#include <mutex>

#include "GibbsAlpGamEtaW_ptr_v7.hpp"
#include "function.hpp"
#include <ctime>

using namespace Rcpp;
using namespace arma;
using namespace std;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// std_setdiff
arma::ivec std_setdiff(arma::ivec& x, arma::ivec& y);
RcppExport SEXP _RMR_ICP_std_setdiff(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ivec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(std_setdiff(x, y));
    return rcpp_result_gen;
END_RCPP
}
// LDclump
ivec LDclump(arma::mat& R, double ld_r2_thresh);
RcppExport SEXP _RMR_ICP_LDclump(SEXP RSEXP, SEXP ld_r2_threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type ld_r2_thresh(ld_r2_threshSEXP);
    rcpp_result_gen = Rcpp::wrap(LDclump(R, ld_r2_thresh));
    return rcpp_result_gen;
END_RCPP
}
// blockinffun
List blockinffun(arma::field<vec> F4gammah);
RcppExport SEXP _RMR_ICP_blockinffun(SEXP F4gammahSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<vec> >::type F4gammah(F4gammahSEXP);
    rcpp_result_gen = Rcpp::wrap(blockinffun(F4gammah));
    return rcpp_result_gen;
END_RCPP
}
// LDclumpfun
List LDclumpfun(arma::field<vec> F4gammah, arma::field<vec> F4Gammah, arma::field<vec> F4se1, arma::field<vec> F4se2, arma::field<mat> F4Rblock, double ld_r2_thresh);
RcppExport SEXP _RMR_ICP_LDclumpfun(SEXP F4gammahSEXP, SEXP F4GammahSEXP, SEXP F4se1SEXP, SEXP F4se2SEXP, SEXP F4RblockSEXP, SEXP ld_r2_threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<vec> >::type F4gammah(F4gammahSEXP);
    Rcpp::traits::input_parameter< arma::field<vec> >::type F4Gammah(F4GammahSEXP);
    Rcpp::traits::input_parameter< arma::field<vec> >::type F4se1(F4se1SEXP);
    Rcpp::traits::input_parameter< arma::field<vec> >::type F4se2(F4se2SEXP);
    Rcpp::traits::input_parameter< arma::field<mat> >::type F4Rblock(F4RblockSEXP);
    Rcpp::traits::input_parameter< double >::type ld_r2_thresh(ld_r2_threshSEXP);
    rcpp_result_gen = Rcpp::wrap(LDclumpfun(F4gammah, F4Gammah, F4se1, F4se2, F4Rblock, ld_r2_thresh));
    return rcpp_result_gen;
END_RCPP
}
// blockfun
umat blockfun(ivec NB);
RcppExport SEXP _RMR_ICP_blockfun(SEXP NBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ivec >::type NB(NBSEXP);
    rcpp_result_gen = Rcpp::wrap(blockfun(NB));
    return rcpp_result_gen;
END_RCPP
}
// normal_pdf
double normal_pdf(double x, double m, double s);
RcppExport SEXP _RMR_ICP_normal_pdf(SEXP xSEXP, SEXP mSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(normal_pdf(x, m, s));
    return rcpp_result_gen;
END_RCPP
}
// RMRICPindep
List RMRICPindep(arma::vec& gammah, arma::vec& Gammah, arma::vec& se1, arma::vec& se2, SEXP opts);
RcppExport SEXP _RMR_ICP_RMRICPindep(SEXP gammahSEXP, SEXP GammahSEXP, SEXP se1SEXP, SEXP se2SEXP, SEXP optsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type gammah(gammahSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gammah(GammahSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type se1(se1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type se2(se2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type opts(optsSEXP);
    rcpp_result_gen = Rcpp::wrap(RMRICPindep(gammah, Gammah, se1, se2, opts));
    return rcpp_result_gen;
END_RCPP
}
// RMRICPSim
Rcpp::List RMRICPSim(arma::vec& gammah, arma::vec& Gammah, arma::vec& se1, arma::vec& se2, arma::mat& R, arma::umat block_inf, SEXP opts);
RcppExport SEXP _RMR_ICP_RMRICPSim(SEXP gammahSEXP, SEXP GammahSEXP, SEXP se1SEXP, SEXP se2SEXP, SEXP RSEXP, SEXP block_infSEXP, SEXP optsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type gammah(gammahSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gammah(GammahSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type se1(se1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type se2(se2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type block_inf(block_infSEXP);
    Rcpp::traits::input_parameter< SEXP >::type opts(optsSEXP);
    rcpp_result_gen = Rcpp::wrap(RMRICPSim(gammah, Gammah, se1, se2, R, block_inf, opts));
    return rcpp_result_gen;
END_RCPP
}
// RMRICP
Rcpp::List RMRICP(arma::field<vec> F4gammah, arma::field<vec> F4Gammah, arma::field<vec> F4se1, arma::field<vec> F4se2, arma::field<mat> F4Rblock, SEXP opts);
RcppExport SEXP _RMR_ICP_RMRICP(SEXP F4gammahSEXP, SEXP F4GammahSEXP, SEXP F4se1SEXP, SEXP F4se2SEXP, SEXP F4RblockSEXP, SEXP optsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<vec> >::type F4gammah(F4gammahSEXP);
    Rcpp::traits::input_parameter< arma::field<vec> >::type F4Gammah(F4GammahSEXP);
    Rcpp::traits::input_parameter< arma::field<vec> >::type F4se1(F4se1SEXP);
    Rcpp::traits::input_parameter< arma::field<vec> >::type F4se2(F4se2SEXP);
    Rcpp::traits::input_parameter< arma::field<mat> >::type F4Rblock(F4RblockSEXP);
    Rcpp::traits::input_parameter< SEXP >::type opts(optsSEXP);
    rcpp_result_gen = Rcpp::wrap(RMRICP(F4gammah, F4Gammah, F4se1, F4se2, F4Rblock, opts));
    return rcpp_result_gen;
END_RCPP
}
// Cal_block_SimR
mat Cal_block_SimR(umat block_inf, arma::umat& X, double lam);
RcppExport SEXP _RMR_ICP_Cal_block_SimR(SEXP block_infSEXP, SEXP XSEXP, SEXP lamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< umat >::type block_inf(block_infSEXP);
    Rcpp::traits::input_parameter< arma::umat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    rcpp_result_gen = Rcpp::wrap(Cal_block_SimR(block_inf, X, lam));
    return rcpp_result_gen;
END_RCPP
}
// fastSigLm
List fastSigLm(const arma::vec& y, const arma::mat& X);
RcppExport SEXP _RMR_ICP_fastSigLm(SEXP ySEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(fastSigLm(y, X));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _RMR_ICP_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _RMR_ICP_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _RMR_ICP_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _RMR_ICP_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RMR_ICP_std_setdiff", (DL_FUNC) &_RMR_ICP_std_setdiff, 2},
    {"_RMR_ICP_LDclump", (DL_FUNC) &_RMR_ICP_LDclump, 2},
    {"_RMR_ICP_blockinffun", (DL_FUNC) &_RMR_ICP_blockinffun, 1},
    {"_RMR_ICP_LDclumpfun", (DL_FUNC) &_RMR_ICP_LDclumpfun, 6},
    {"_RMR_ICP_blockfun", (DL_FUNC) &_RMR_ICP_blockfun, 1},
    {"_RMR_ICP_normal_pdf", (DL_FUNC) &_RMR_ICP_normal_pdf, 3},
    {"_RMR_ICP_RMRICPindep", (DL_FUNC) &_RMR_ICP_RMRICPindep, 5},
    {"_RMR_ICP_RMRICPSim", (DL_FUNC) &_RMR_ICP_RMRICPSim, 7},
    {"_RMR_ICP_RMRICP", (DL_FUNC) &_RMR_ICP_RMRICP, 6},
    {"_RMR_ICP_Cal_block_SimR", (DL_FUNC) &_RMR_ICP_Cal_block_SimR, 3},
    {"_RMR_ICP_fastSigLm", (DL_FUNC) &_RMR_ICP_fastSigLm, 2},
    {"_RMR_ICP_rcpparma_hello_world", (DL_FUNC) &_RMR_ICP_rcpparma_hello_world, 0},
    {"_RMR_ICP_rcpparma_outerproduct", (DL_FUNC) &_RMR_ICP_rcpparma_outerproduct, 1},
    {"_RMR_ICP_rcpparma_innerproduct", (DL_FUNC) &_RMR_ICP_rcpparma_innerproduct, 1},
    {"_RMR_ICP_rcpparma_bothproducts", (DL_FUNC) &_RMR_ICP_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RMR_ICP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
